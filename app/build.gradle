apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'jacoco'

//def coverageSourceDirs = [
//        '../app/src/main/java'
//]
//
//task jacocoTestReport(type: JacocoReport) {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    reports {
//        xml.enabled = true
//        html.enabled = true
////        csv.enable = true
//    }
//    classDirectories.from = fileTree(
//            dir: './build/intermediates/javac/debug',
//            excludes: ['**/R*.class',
//                       '**/*$InjectAdapter.class',
//                       '**/*$ModuleAdapter.class',
//                       '**/*$ViewInjector*.class'
//            ])
//    sourceDirectories.from = files(coverageSourceDirs)
//    executionData.from = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
//
//    doFirst {
//        new File("$buildDir/intermediates/javac/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//}
task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
//        csv.enabled false
    }

    executionData fileTree("$buildDir/coverage.ec")

    def classExcludes = ['**/R*.class',
                         '**/*Factory*.class',
                         '**/*$InjectAdapter*.class',
                         '**/*$ModuleAdapter*.class',
                         '**/*$ViewInjector*.class']

    sourceDirectories.from = files()
    classDirectories.from = files()

    project.rootProject.allprojects.each {

        sourceDirectories.from += files(it.projectDir.absolutePath + '/src/main/java')
        System.println("path:${it.projectDir.absolutePath}")
        def path = it.buildDir.absolutePath + '/intermediates/javac/debug/classes/'
        classDirectories.from += fileTree(dir: path, excludes: classExcludes, includes: ['**/*.class'])
    }

    doFirst {
        fileTree(dir: project.rootDir.absolutePath, includes: ['**/classes/**/*.class']).each { File file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.wly.jacocodemo"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
//            testCoverageEnabled = true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation project(':secondlib')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
